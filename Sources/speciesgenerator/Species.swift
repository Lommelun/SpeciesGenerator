import Foundation

class Species {
    private let imageParser: ImageParser

    private let modDirectory: URL
    private let speciesName: String
    private let speciesSoundAssetName: String

    private var portraitImageNames: [String] {
        imageParser.ddsFileNamesWithoutExtension().enumerated().map { index, imageName in
            "\(imageName)_\(index)"
        }
    }

    private var portraits: [String] {
        imageParser.ddsFileNames().enumerated().map { index, fileName in
            "\(portraitImageNames[index]) = { greeting_sound = \"\(speciesSoundAssetName)\" texturefile = \"gfx/models/portraits/\(fileName)\" }"
        }
    }

    init(speciesName: String, speciesSoundAssetName: String, modDirectory: URL?, imageParser: ImageParser) {
        self.speciesName = speciesName
        self.speciesSoundAssetName = speciesSoundAssetName
        self.modDirectory = modDirectory ?? URL(fileURLWithPath: FileManager.default.currentDirectoryPath)
        self.imageParser = imageParser
    }

    func writeFile() {
        FM.createFile(
            named: "00_portraits_\(speciesName).txt",
            at: modDirectory.appendingPathComponent("gfx")
                            .appendingPathComponent("portraits")
                            .appendingPathComponent("portraits"),
            with: Data(fileContents.utf8)
        )
    }

    private var fileContents: String {
        """
        ### Generated by SpeciesGenerator cli tool

        portraits = {
            \(portraits.joined(separator: "\n    "))
        }

        portrait_groups = {
            \(speciesName) = {
                default = \(findPortrait(portraits: portraitImageNames))
                game_setup = { #will run with a limited country scope. species and government is set but the country does not actually exist
                    add = {
                        portraits = {
                            \(portraitImageNames.joined(separator: "\n                    "))				
                        }
                    }
                }

                #species scope
                species = { #generic portrait for a species
                    add = {
                        portraits = {
                            \(portraitImageNames.joined(separator: "\n                    "))				
                        }
                    }
                }

                #pop scope
                pop = { #for a specific pop
                    add = {
                        portraits = {
                            \(portraitImageNames.joined(separator: "\n                    "))				
                        }
                    }
                }

                #leader scope
                leader = { #scientists, generals, admirals, governor
                    add = {
                        portraits = {
                            \(portraitImageNames.joined(separator: "\n                    "))				
                        }
                    }
                }


                #leader scope
                ruler = {
                    add = {
                        portraits = {
                            \(portraitImageNames.joined(separator: "\n                    "))				
                        }
                    }
                }
            }
        }

        """
    }

    private func findPortrait(portraits: [String]) -> String {
        portraits.first(where: { $0.starts(with: "portrait") }) ?? portraits.first ?? ""
    }
}